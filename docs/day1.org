* Day 1 API

** Increment

#+BEGIN_SRC C++
  __host__ cudaError_t cudaMalloc(void** devPtr, size_t size);
  __host__ cudaError_t cudaFree  (void* devPtr );
  __host__ cudaError_t cudaMemcpy(void* dst,
                                  cost void* src,
                                  size_t count,
                                  cudaMemcpyKind kind);
  enum cudaMemcpyKind {
    cudaMemcpyHostToHost,
    cudaMemcpyHostToDevice,
    cudaMemcpyDeviceToHost,
    cudaMemcpyDeviceToDevice,
    cudaMemcpyDefault
  };
#+END_SRC

** Vector addition

#+BEGIN_SRC C++
  __host__ cudaError_t cudaPeekAtLastError(void);
  __host__ cudaError_t cudaGetLastError(void);
  __host__ const char* cudaGetErrorName(cudaError_t error);
  __host__ const char* cudaGetErrorString(cudaError_t error);
#+END_SRC

** Profiling functions

\TODO this section is not an exercise per say but I believe we ask students to
time their last kernel using CUDA events. Remove if wrong/unnecessary.

#+BEGIN_SRC C++
  __host__ cudaError_t cudaDeviceSynchronize(void);

  __host__ cudaError_t cudaEventCreate(cudaEvent_t *event);
  __host__ cudaError_t cudaEventRecord(cudaEvent_t event, cudaStream_t stream __dv(0));
  __host__ cudaError_t cudaEventSynchronize(cudaEvent_t event);
  __host__ cudaError_t cudaEventElapsedTime(float *ms, cudaEvent_t start, cudaEvent_t end);
  __host__ cudaError_t cudaEventDestroy(cudaEvent_t event);
#+END_SRC



